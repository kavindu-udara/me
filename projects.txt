1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-ba153405bf2e16a5.js","177","static/chunks/app/layout-869602401073e884.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
5:I[2356,["507","static/chunks/507-230f21db1b45fc0a.js","893","static/chunks/app/projects/page-60cd1f4fcfcdbaa2.js"],"default"]
18:I[6213,[],"OutletBoundary"]
1a:I[6213,[],"MetadataBoundary"]
1c:I[6213,[],"ViewportBoundary"]
1e:I[4835,[],""]
:HL["/me/_next/static/css/8d0a0874ede7a238.css","style"]
6:Td7e,
Great to hear that you're ready to publish your React project on GitHub Pages! Here are the steps you can follow to build and deploy your project:

![Example Image](assets/blogs/images/test-image.jpeg)

1. **Install gh-pages**:
   First, you need to install the `gh-pages` package as a dev dependency. Open your terminal and run the following command:
   ```sh
   npm install gh-pages --save-dev
   ```

2. **Update package.json**:
   Next, you need to make some updates to your `package.json` file. Add the following properties:
   ```json
   {
     "homepage": "https://your-username.github.io/your-repo-name",
     "scripts": {
       "predeploy": "npm run build",
       "deploy": "gh-pages -d build"
     }
   }
   ```
   Replace `your-username` with your GitHub username and `your-repo-name` with the name of your repository.

3. **Build and deploy**:
   Finally, run the following command in your terminal to build and deploy your project:
   ```sh
   npm run deploy
   ```

This will create a production build of your React project and push it to a branch named `gh-pages` in your GitHub repository. Your site will be available at `https://your-username.github.io/your-repo-name`.

If you need any more help or run into any issues, feel free to ask!

---

# Update the changes

Updating your deployed page on GitHub Pages after making changes to your project is quite straightforward. All you need to do is follow these steps:

1. **Make Changes**: First, make the necessary changes to your project locally.

2. **Commit Changes**: Save and commit your changes to your local repository:
   ```sh
   git add .
   git commit -m "Your commit message"
   ```

3. **Push Changes**: Push your changes to your GitHub repository:
   ```sh
   git push origin main
   ```
   Replace `main` with your branch name if it's different.

4. **Deploy Again**: Run the deploy script again to update the GitHub Pages with your latest changes:
   ```sh
   npm run deploy
   ```

This will rebuild your project and push the new build to the `gh-pages` branch, updating your deployed page.

By following these steps, your live site will reflect the latest changes you've made to your project. If you run into any issues or need further assistance, feel free to ask!

--- 

# Resources not loading - vite config error

It looks like the problem is that your assets are not being found at the correct paths. This usually happens because of incorrect relative paths or base URL configuration. In Vite, you can fix this by setting the `base` property in `vite.config.js` to match your repository name.

Hereâ€™s how you can update your `vite.config.js` file:

1. **Create or edit vite.config.js**:
   If you don't have a `vite.config.js` file, create one in the root of your project. Add the following content:

   ```js
   // vite.config.js
   import { defineConfig } from 'vite';
   import react from '@vitejs/plugin-react';

   export default defineConfig({
     base: '/react-music-player/', // Replace with your repo name
     plugins: [react()],
   });
   ```

   If you already have a `vite.config.js` file, just add or update the `base` property as shown above.

2. **Rebuild and redeploy**:
   Now, rebuild your project and deploy it again:

   ```sh
   npm run build
   npm run deploy
   ```

This should fix the asset paths and make sure your deployed site loads correctly. If you encounter any more issues or need further assistance, feel free to let me know!7:T1273,
React components are the building blocks of React applications. They allow developers to break the UI into reusable, independent pieces.

---
### Functional Components vs Class Components

| **Aspect**               | **Functional Components**                                             | **Class Components**                                 |
| ------------------------ | --------------------------------------------------------------------- | ---------------------------------------------------- |
| **Definition**           | Plain JavaScript functions that return JSX.                           | ES6 classes that extend `React.Component`.           |
| **State**                | Uses the `useState` and `useEffect` hooks (introduced in React 16.8). | Uses `this.state` for managing state.                |
| **Lifecycle Methods**    | Replaced by hooks like `useEffect`.                                   | Explicit lifecycle methods like `componentDidMount`. |
| **Syntax**               | Simpler and more concise.                                             | More verbose due to class structure.                 |
| **Performance**          | Generally lighter and faster.                                         | Slightly heavier because of class overhead.          |
| **Example**              |                                                                       |                                                      |
| Functional Component:    | Class Component:                                                      |                                                      |
| ```jsx                   | ```jsx                                                                |                                                      |
| function Greet() {       | class Greet extends React.Component {                                 |                                                      |
| return `<h1>Hello</h1>`; | render() {                                                            |                                                      |
| }                        | return `<h1>Hello</h1>`;                                              |                                                      |
| ```                      | }                                                                     |                                                      |

---
### When to Use?

- Use functional components whenever possible; they are the modern and preferred approach. Class components are now rarely used in new projects.

---
### How to Create and Export Components

1. Creating a Functional Component
	```jsx
	// Greet.jsx
	function Greet() {
    return <h1>Hello, World!</h1>;
	}
	export default Greet;
	```
	
2. Creating a Class Component
	```jsx
	// Welcome.jsx
	import React, { Component } from 'react';
	class Welcome extends Component {
    render() {
        return <h1>Welcome to React!</h1>;
	    }
	}
	export default Welcome;
	```

3. Named Exports
	You can export multiple components from a file:
```jsx
// Greetings.jsx
export function Hello() {
    return <h1>Hello!</h1>;
}

export function Goodbye() {
    return <h1>Goodbye!</h1>;
}

```

---
### Importing Components and Using Them Inside Other Components

1. Default Export
	Import and use a default exported component
```jsx
import Greet from './Greet';

function App() {
    return (
        <div>
            <Greet />
        </div>
    );
}
export default App;

```

2. Named Exports
	Import and use named exported components
```jsx
import { Hello, Goodbye } from './Greetings';

function App() {
    return (
        <div>
            <Hello />
            <Goodbye />
        </div>
    );
}
export default App;
```

3. Aliasing Components
	Rename components during import
```jsx
import { Hello as Hi } from './Greetings';

function App() {
    return <Hi />;
}
export default App;
```

4. Composing Components
	Use components inside other components to build a hierarchy
```jsx
import Greet from './Greet';

function Header() {
    return (
        <header>
            <Greet />
            <h2>This is a header</h2>
        </header>
    );
}

export default Header;
```

---
### Summary

- **Functional Components** are the modern standard due to hooks and simplicity.
- Components can be exported as default or named exports.
- You can compose a rich UI by importing and using components inside other components.  
    This modular structure makes React scalable and maintainable.

---
# References

- https://www.freecodecamp.org/news/function-component-vs-class-component-in-react/8:T1016,
Conditional rendering allows components to decide what to display based on certain conditions. React provides several ways to implement conditional rendering, making it easy to display different UI elements based on the state or props of a component.

---

### 1. Using `if-else` Statements

You can use standard JavaScript `if-else` statements for conditional rendering within a component. Typically, you would do this outside of the JSX return statement, such as within the render function or directly before the return.

#### Example: Using `if-else`

```jsx
function Greeting({ isLoggedIn }) {
    let message;
    
    if (isLoggedIn) {
        message = <h1>Welcome Back!</h1>;
    } else {
        message = <h1>Please Sign In</h1>;
    }

    return <div>{message}</div>;
}
```

In this example, `if-else` is used to set the value of `message` based on the `isLoggedIn` prop, which is then rendered inside the component.

---

### 2. Using Ternary Operators

A **ternary operator** is a shorthand for `if-else` and is commonly used for inline conditional rendering within JSX. It has the following syntax:

```jsx
condition ? expression_if_true : expression_if_false;
```

#### Example: Using Ternary Operator

```jsx
function Greeting({ isLoggedIn }) {
    return (
        <div>
            {isLoggedIn ? <h1>Welcome Back!</h1> : <h1>Please Sign In</h1>}
        </div>
    );
}
```

In this example, if `isLoggedIn` is `true`, "Welcome Back!" is rendered; otherwise, "Please Sign In" is shown. Ternary operators are great for simple conditions.

---

### 3. Using `&&` (Logical AND) Operator

The `&&` (logical AND) operator can be used for conditional rendering when you want to display something only if a condition is `true`. This is useful for scenarios where you only want to render an element when a certain condition holds.

#### Example: Using `&&` Operator

```jsx
function Notification({ message }) {
    return (
        <div>
            {message && <p>{message}</p>}
        </div>
    );
}
```

In this example, the paragraph will only be rendered if `message` is truthy. If `message` is `null` or `undefined`, nothing will be displayed.

---

### 4. Conditional Rendering Based on Multiple Conditions

You can also combine `if-else`, ternary operators, and `&&` logic for more complex conditions.

#### Example: Multiple Conditions

```jsx
function UserStatus({ user }) {
    return (
        <div>
            {user ? (
                user.isAdmin ? (
                    <h1>Welcome, Admin!</h1>
                ) : (
                    <h1>Welcome, {user.name}!</h1>
                )
            ) : (
                <h1>Please log in</h1>
            )}
        </div>
    );
}
```

In this example, multiple conditions are checked using nested ternary operators to display different messages based on whether the user is logged in and whether they are an admin.

---

### Summary of Conditional Rendering Methods

|**Method**|**Use Case**|**Example**|
|---|---|---|
|**`if-else`**|For more complex conditions or multiple branches|`if (isLoggedIn) { return <h1>Welcome!</h1>; } else { return <h1>Please Sign In</h1>; }`|
|**Ternary Operator**|Inline conditionals, simpler cases|`{isLoggedIn ? <h1>Welcome!</h1> : <h1>Please Sign In</h1>}`|
|**`&&` (Logical AND)**|When you want to render something only if a condition is true|`{isLoggedIn && <h1>Welcome!</h1>}`|

---

### Best Practices

- Use **ternary operators** for simple conditions, especially within JSX.
- Use **`&&`** for conditional rendering when you only want to render an element when a condition is true.
- For more complex logic, prefer **`if-else` statements** outside of JSX.

By using these techniques, you can conditionally render content in React based on various states, props, or conditions, enabling dynamic and interactive user interfaces.

---
# References

- https://www.w3schools.com/react/react_conditional_rendering.asp
- https://legacy.reactjs.org/docs/conditional-rendering.html9:T1421,
Deploying a React app involves several steps to prepare the app for production, including optimizing the build, configuring deployment settings, and choosing a hosting platform. This note focuses on the preparation of a React app for production using the `npm run build` command, which creates an optimized version of your app for deployment.

---

### 1. Preparing the App for Production Using `npm run build`

When youâ€™re ready to deploy your React app, the first step is to create a **production build**. React provides a command `npm run build` that bundles your app into static files optimized for performance. This build includes minified JavaScript, optimized assets, and a structure that can be served by a static server.

#### Steps to Prepare Your React App for Production

1. **Ensure the Project is Ready:**
    
    - Before building your app, make sure all code is final and all features are working as expected.
    - Test your app thoroughly in development mode (`npm start`).
2. **Create a Production Build:** To create a production-ready build, open your terminal and run:
    
    ```bash
    npm run build
    ```
    
    This command does the following:
    
    - **Minifies** and **bundles** your JavaScript and CSS files for faster loading.
    - Optimizes images and other assets.
    - Adds **hashing** to filenames to improve caching.
    - Ensures that the app is ready for deployment to a web server.
    
    After running the command, a new folder named `build/` will be created in your project directory.
    
3. **Inspect the Build Folder:** The `build/` folder will contain the following files:
    
    - `index.html`: The main HTML file that includes links to your bundled JavaScript and CSS.
    - `static/`: A folder containing all the assets (images, fonts, etc.) and minified JavaScript and CSS files.
    - `asset-manifest.json`: Contains a list of files with their hash for cache management.
    
    This build folder is ready to be deployed to a static server.
    
4. **Environment Variables:** Ensure that all necessary environment variables are set for production. You can define them in `.env` files or directly in the server environment.
    
    For example, if you need to specify a different **API URL** for production, you can use:
    
    ```bash
    REACT_APP_API_URL=https://api.yourdomain.com
    ```
    
    These environment variables are automatically replaced during the build process.
    
5. **Check the Build:** It's a good idea to test the build locally before deploying. You can use a simple static server like **serve** to serve your production build.
    
    First, install `serve` globally if you donâ€™t have it:
    
    ```bash
    npm install -g serve
    ```
    
    Then, run the following command to serve your build:
    
    ```bash
    serve -s build
    ```
    
    This will start a local server that serves your production build, allowing you to check if everything is working as expected before deploying it to a live server.
    

---

### 2. Key Benefits of Using `npm run build`

- **Performance Optimization:** The `build` command optimizes your React app for production by reducing the file sizes (through minification), removing unnecessary code, and making the app load faster.
- **Caching:** The build process generates hashed filenames for assets, improving cache management on the client side. This means that once assets are cached, users won't have to re-download them unless they change.
- **Compatibility:** The production build is optimized to run on most modern web servers, making it easier to deploy to different hosting platforms.

---

### 3. Deploying the Production Build

Once the build is ready, you can deploy it to your desired hosting platform. Some common platforms for deploying React apps include:

- **Netlify:** Simple, free hosting for static sites. Just drag and drop the `build/` folder or link your GitHub repository.
- **Vercel:** Another popular platform for static apps that integrates well with React. It automatically optimizes the build during deployment.
- **GitHub Pages:** Free hosting for static websites directly from your GitHub repository.
- **Firebase Hosting:** Provides fast, secure hosting for web apps with a free tier available.
- **AWS S3 & CloudFront:** For more complex or scalable deployments.

---

### Summary

- **`npm run build`** is the key command for preparing your React app for production. It bundles and optimizes your app for performance and scalability.
- After building the app, you will have a `build/` folder containing all the optimized assets ready to be deployed.
- Ensure that environment variables are correctly set for production, and test the build locally before deploying it.
- Popular platforms for deploying React apps include Netlify, Vercel, Firebase, and GitHub Pages.

By following these steps, youâ€™ll ensure your React app is production-ready and performs optimally for end-users.

---
# References

- https://www.geeksforgeeks.org/how-do-you-deploy-a-react-application/a:T119b,
React provides a way to handle user interactions such as clicks, form submissions, and other events using event handlers. These handlers work similarly to JavaScript event listeners but are optimized for React's virtual DOM.

---

### 1. Handling Events in React

##### Key Points:

- Event handlers in React are written as camelCase (e.g., `onClick`, `onChange`).
- Handlers are passed as functions, not strings (e.g., `onClick={() => alert('Clicked!')}`).

##### Common Event Handlers

- **Click Events**: Triggered when an element is clicked.
- **Input Events**: Triggered when input fields change.
- **Form Events**: Triggered during form submission.

---

#### Handling Click Events

```jsx
function ClickHandler() {
    const handleClick = () => {
        alert('Button clicked!');
    };

    return <button onClick={handleClick}>Click Me</button>;
}
```

---

#### Handling Input Events

```jsx
function InputHandler() {
    const handleChange = (event) => {
        console.log(event.target.value);
    };

    return <input type="text" onChange={handleChange} />;
}
```

---

### Handling Form Submission

```jsx
function FormHandler() {
    const handleSubmit = (event) => {
        event.preventDefault(); // Prevents default form submission behavior
        alert('Form submitted!');
    };

    return (
        <form onSubmit={handleSubmit}>
            <button type="submit">Submit</button>
        </form>
    );
}
```

---

### 2. Event Binding and Passing Data with Event Handlers

#### Event Binding

In React, event handlers automatically bind to the component instance, so you usually don't need explicit binding as in class components. However, in class components, you can bind methods in three ways:

1. **Arrow Functions in JSX** (recommended):
    
    ```jsx
    <button onClick={() => this.handleClick()}>Click Me</button>
    ```
    
2. **Bind in the Constructor**:
    
    ```jsx
    constructor() {
        super();
        this.handleClick = this.handleClick.bind(this);
    }
    ```
    
3. **Class Properties (ES6)**:
    
    ```jsx
    handleClick = () => {
        console.log('Button clicked!');
    };
    ```
    

---

### Passing Data with Event Handlers

1. **Using Arrow Functions**:
    
    ```jsx
    function Greet({ name }) {
        const handleClick = () => {
            alert(`Hello, ${name}!`);
        };
    
        return <button onClick={handleClick}>Greet</button>;
    }
    
    function App() {
        return <Greet name="John" />;
    }
    ```
    
2. **Passing Arguments**:
    
    - Use an arrow function to pass arguments:
        
        ```jsx
        function Button({ message }) {
            const handleClick = (msg) => {
                alert(msg);
            };
        
            return <button onClick={() => handleClick(message)}>Click Me</button>;
        }
        ```
        

---

### 3. Preventing Default Behavior

- Use `event.preventDefault()` to stop default browser actions:
    
    ```jsx
    function LinkHandler() {
        const handleClick = (event) => {
            event.preventDefault();
            alert('Default action prevented!');
        };
    
        return <a href="https://example.com" onClick={handleClick}>Click Me</a>;
    }
    ```
    

---

### 4. Accessing Event Data

React's event handling uses a synthetic event system, which wraps the browser's native event and normalizes cross-browser compatibility.

- Access event properties like `target`, `type`, etc.:
    
    ```jsx
    function InputLogger() {
        const handleInput = (event) => {
            console.log(`Input value: ${event.target.value}`);
        };
    
        return <input type="text" onChange={handleInput} />;
    }
    ```
    

---

### Summary

|**Event**|**Handler**|**Example**|
|---|---|---|
|**Click**|`onClick`|`<button onClick={handleClick}>Click Me</button>`|
|**Input Change**|`onChange`|`<input onChange={handleChange} />`|
|**Form Submission**|`onSubmit`|`<form onSubmit={handleSubmit}></form>`|
|**Prevent Default**|`event.preventDefault()`|`<a onClick={handleClick}>Link</a>`|
|**Passing Data**|Arrow functions or bind|`<button onClick={() => handleClick(arg)}>Click</button>`|

By combining event handlers with state or props, React allows for building dynamic and interactive UIs.

---
# References
b:T11a2,
Rendering lists in React is common for displaying multiple items dynamically. React provides a built-in way to efficiently render lists using JavaScript array methods like `.map()`. Additionally, using **keys** is important for optimizing rendering and maintaining state in lists.

---

#### 1. Rendering Lists with `.map()`

In React, the `.map()` function is commonly used to iterate over an array of data and return an array of elements that can be rendered. This is especially useful for rendering dynamic data like lists of items.

##### Example: Rendering a List of Items

```jsx
function ItemList() {
    const items = ['Apple', 'Banana', 'Cherry'];

    return (
        <ul>
            {items.map((item, index) => (
                <li key={index}>{item}</li>
            ))}
        </ul>
    );
}
```

In this example:

- We use the `.map()` method to iterate over the `items` array.
- For each item, we return a list item (`<li>`) containing the `item` text.

---

#### 2. Importance of Keys in List Rendering

**Keys** help React identify which items have changed, been added, or removed, allowing for efficient updates to the virtual DOM and the UI. When rendering lists, React needs a unique identifier for each element to keep track of their position and improve performance.

##### Why are Keys Important?

- **Efficient Updates**: Without keys, React would have to re-render all list items when one item changes. With keys, React only re-renders the changed items.
- **Unique Identification**: Keys ensure that React can distinguish between individual elements in a list.

##### Best Practices for Keys:

- Keys must be **unique** among siblings (elements at the same level in the list).
- Avoid using **array indices** as keys when the list can change dynamically (e.g., items can be added or removed).

##### Example: Using Unique Keys

```jsx
function ItemList() {
    const items = [
        { id: 1, name: 'Apple' },
        { id: 2, name: 'Banana' },
        { id: 3, name: 'Cherry' }
    ];

    return (
        <ul>
            {items.map((item) => (
                <li key={item.id}>{item.name}</li>
            ))}
        </ul>
    );
}
```

In this example:

- Each list item has a unique `id` which is used as the key.
- This ensures that React can efficiently track changes to the list.

---

#### 3. Handling Dynamic List Changes

When the list data changes (e.g., items are added, removed, or reordered), keys help React know how to efficiently update the UI. Without keys or with incorrect keys, React may not be able to identify which items are changing and might re-render the entire list unnecessarily.

##### Example: Reordering List Items

```jsx
function ItemList() {
    const [items, setItems] = useState([
        { id: 1, name: 'Apple' },
        { id: 2, name: 'Banana' },
        { id: 3, name: 'Cherry' }
    ]);

    const reorderItems = () => {
        setItems([items[2], items[1], items[0]]);
    };

    return (
        <div>
            <button onClick={reorderItems}>Reorder Items</button>
            <ul>
                {items.map((item) => (
                    <li key={item.id}>{item.name}</li>
                ))}
            </ul>
        </div>
    );
}
```

In this example:

- If the `key` were not unique, React might not correctly update the UI after the items are reordered.
- With the unique `id` as the key, React efficiently reorders the items in the list without unnecessary re-renders.

---

### Summary of Lists and Keys

|**Method**|**Description**|**Example**|
|---|---|---|
|**Rendering Lists with `.map()`**|Iterates over an array to create an array of elements.|`{items.map(item => <li key={item.id}>{item.name}</li>)}`|
|**Importance of Keys**|Keys help React identify items and optimize re-renders.|`key={item.id}` ensures React optimally updates lists.|
|**Best Practices for Keys**|Use unique identifiers (not array indices) as keys.|Prefer `key={item.id}` over `key={index}`.|

---

### Conclusion

- Use **`.map()`** to render lists dynamically in React.
- Always provide a **unique `key`** for each item in the list to improve performance and ensure accurate updates during re-renders.
- Avoid using array indices as keys, especially when the list can be modified, as it may lead to issues with the state and rendering.

---
# References

- https://legacy.reactjs.org/docs/lists-and-keys.htmlc:T55a,
Here is a bash script that creates a markdown file with the specified template in the directory 'public/assets/readmes/':

> This is a blog quote text.

```bash
#!/bin/bash

# Function to create a new markdown file
create_markdown_file() {
    # Get the current date and time in the required format
    current_date=$(date +"%Y-%m-%dT%H:%M:%S%z")

    # Get the title from the user
    read -p "Enter the title of the markdown file: " title read -p "Enter the title of the markdown file: " title read -p "Enter the title of the markdown file: " title read -p "Enter the title of the markdown file: " title

    # Replace spaces with underscores for the filename
    filename="${title// /_}.md"
    
    # Define the directory
    dir="public/assets/readmes/"
    
    # Create the directory if it doesn't exist
    mkdir -p $dir
    
    # Define the file path
    filepath="${dir}${filename}"

    # Create the markdown file with the template
    cat <<EOF > $filepath
---
date: ${current_date}
draft: true
title: ${title}
---

EOF

    echo "Markdown file created at ${filepath}"
}

# Call the function
create_markdown_file
```

This script will prompt the user for the title of the markdown file and then create the file with the current date and time, `draft` set to `true`, and the provided title. The file will be saved in the directory 'public/assets/readmes/'.
d:T4f6,
**Props** (short for properties) are used to pass data from a parent component to a child component. Props are **read-only**, meaning they cannot be modified by the child component receiving them.

---
### Key Features of Props

- Passed as an object to the component.
- Immutable (cannot be changed by the component receiving them).
- Used for dynamic data and reusability.

---
### How to Pass Props Between Components

1. Define props in the parent component
	```jsx
	function Parent() {
    const name = "John";
    return <Child name={name} />;
	}
	```

2. Access props in the child component
	```jsx
	function Child(props) {
    return <h1>Hello, {props.name}!</h1>;
	}
	```

3. Destructure props for cleaner syntax
	```jsx
	function Child({ name }) {
    return <h1>Hello, {name}!</h1>;
	}
	```

___
### Example of Props

```jsx
function Button({ label, onClick }) {
    return <button onClick={onClick}>{label}</button>;
}

function App() {
    const handleClick = () => alert("Button clicked!");
    return <Button label="Click Me" onClick={handleClick} />;
}
```

---
# References

- https://legacy.reactjs.org/docs/components-and-props.html
- https://www.freecodecamp.org/news/how-to-use-props-in-reactjs/e:T85a,
1. **Introduction**
	- What is React and Why use React ?
		- [React Reusable Components](../react-reusable-components)
		- [React Virtual DOM](../react-virtual-dom)
		- Large Community Support
	- [Real-world Examples of apps build with React](../real-world-examples-of-apps-build-with-react)

2. [**Setting Up the Development Environment for React with Vite**](../setting-up-the-development-environment-for-react-with-vite)
	- Installing Node.js and npm.
	- Setting up a React Project.
	- Overview of the project folder structure.

3. **Understanding JSX / TSX** 
	- [What is JSX, TSX and How It Differs from HTML](../what-is-jsx-tsx-and-how-ut-differs-from-html)
	- JSX/TSX attributes and how to use them.

4. [**Components in React**](../components-in-react) 
	- Functional Components vs Class Components.
	- How to create and export components.
	- Importing components and using them inside other components.

5. **Props and State** [Props in React](../props-in-react), [State in React](../state-in-react)
	- Introduction to props and how to pass data between components.
	- Introduction to state and `useState` hook.
	- Updating and managing state.

6. [**Event Handling in React** ](../event-handling-in-react)
	- How to handle events like clicks, inputs, and form submissions.
	- Event binding and passing data with event handlers.

7. [**Conditional Rendering in React**](../conditional-rendering-in-react)
	- How to conditionally render components using `if-else`, `ternary operators`, and `&&` logic.

8.  [**Lists and Keys in React**](../lists-and-keys-in-react)
	- How to render lists in React using `.map()`.
	- Importance of keys in list rendering.

9. [**React Lifecycle and Hooks**](../react-lifecycle-and-hooks)
	- Introduction to React hooks: `useEffect` for handling side effects.

10. [**Styling in React**](../styling-in-react)
	- Inline styles vs External CSS vs CSS Modules.
	- Introduction to styling libraries like Styled Components or Tailwind CSS.

11. [**Deploying a React App**](../deploying-a-react-app)
	- Preparing the app for production using `npm run build`.f:T19af,
React hooks allow functional components to manage side effects, state, and other lifecycle events. The introduction of hooks has simplified component lifecycle management and enabled functional components to become more powerful and feature-rich.

---

### 1. Introduction to React Hooks

React hooks are functions that allow you to "hook into" React features from functional components. They provide a more declarative approach to handling component logic compared to class components. The most commonly used hooks are:

- `useState`: To manage state in functional components.
- `useEffect`: For handling side effects, such as fetching data or subscribing to external services.
- `useContext`: For accessing context data.

The `useEffect` hook, in particular, is essential for dealing with side effects in React.

---

### 2. The `useEffect` Hook

The `useEffect` hook allows you to perform **side effects** in functional components. Side effects refer to operations that affect something outside the component, such as:

- Fetching data from an API.
- Subscribing to a service or event.
- Manipulating the DOM.
- Setting up timers.

The `useEffect` hook replaces the lifecycle methods found in class components (`componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`).

#### Basic Syntax of `useEffect`

```jsx
useEffect(() => {
    // Code to run on component mount or state change
}, [dependencies]);
```

- The first argument is a **function** containing the side-effect logic.
- The second argument is an **array of dependencies**. If any of the dependencies change, the effect will run again.

#### Example: Basic `useEffect` Usage

```jsx
import React, { useState, useEffect } from 'react';

function DataFetchingComponent() {
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetch('https://api.example.com/data')
            .then(response => response.json())
            .then(data => {
                setData(data);
                setLoading(false);
            });
    }, []); // Empty dependency array ensures effect runs only once (componentDidMount)

    if (loading) return <p>Loading...</p>;

    return (
        <div>
            <h1>Data</h1>
            <ul>
                {data.map(item => (
                    <li key={item.id}>{item.name}</li>
                ))}
            </ul>
        </div>
    );
}
```

In this example:

- **`useEffect`** fetches data from an API when the component mounts (similar to `componentDidMount` in class components).
- The empty dependency array `[]` means the effect runs only once after the initial render.

---

### 3. Cleanup with `useEffect`

Sometimes, you need to clean up after an effect, such as clearing timers or unsubscribing from an event. You can return a **cleanup function** from `useEffect`.

#### Example: Cleanup in `useEffect`

```jsx
import React, { useEffect, useState } from 'react';

function Timer() {
    const [seconds, setSeconds] = useState(0);

    useEffect(() => {
        const timerId = setInterval(() => {
            setSeconds(prev => prev + 1);
        }, 1000);

        // Cleanup function to clear the interval
        return () => {
            clearInterval(timerId);
        };
    }, []); // Runs once, equivalent to componentDidMount

    return <h1>Seconds: {seconds}</h1>;
}
```

In this example:

- A timer is set using `setInterval` in the `useEffect` hook.
- The **cleanup function** returned from `useEffect` clears the interval when the component is unmounted or before the effect is re-run.

---

### 4. Conditional Execution of `useEffect`

By specifying **dependencies**, you can control when the `useEffect` hook runs:

- If the dependency array is empty `[]`, the effect runs only once when the component mounts.
- If the array contains values (e.g., `[prop, state]`), the effect runs when any of those values change.

#### Example: Conditional `useEffect`

```jsx
import React, { useState, useEffect } from 'react';

function Counter() {
    const [count, setCount] = useState(0);

    useEffect(() => {
        document.title = `You clicked ${count} times`;
    }, [count]); // Runs whenever count changes

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={() => setCount(count + 1)}>Click me</button>
        </div>
    );
}
```

In this example:

- The effect runs only when the `count` state changes, and it updates the document title with the current count.

---

### 5. Use Case Examples of `useEffect`

- **Fetching data on mount:**
    
    ```jsx
    useEffect(() => {
      fetchData();
    }, []);  // Runs once after component mount
    ```
    
- **Subscribing to an event:**
    
    ```jsx
    useEffect(() => {
      const handleResize = () => {
        console.log('Window resized');
      };
      window.addEventListener('resize', handleResize);
    
      // Cleanup on component unmount
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }, []); // Runs once
    ```
    
- **Setting up a timer:**
    
    ```jsx
    useEffect(() => {
      const timer = setInterval(() => {
        console.log('Timer ticked');
      }, 1000);
    
      return () => clearInterval(timer);  // Cleanup on unmount
    }, []);
    ```
    

---

### Summary of `useEffect`

|**Feature**|**Description**|**Example**|
|---|---|---|
|**Basic usage**|Handles side effects like fetching data, setting up timers, etc.|`useEffect(() => { fetchData(); }, []);`|
|**Dependencies**|Array of values that the effect depends on.|`useEffect(() => { console.log(count); }, [count]);`|
|**Cleanup function**|Cleans up after effects (e.g., clearing timers).|`return () => { clearInterval(timer); }`|
|**Conditional execution**|Control when the effect runs by setting dependencies.|`useEffect(() => { console.log('Mounted!'); }, []);`|

---

### Conclusion

- **`useEffect`** is a powerful hook for managing side effects in functional components.
- It allows you to **fetch data**, **subscribe to events**, and handle **cleanups** in a declarative way.
- By using the dependency array, you can control when the effect should run, making it highly flexible and efficient.

---
# References

- https://www.freecodecamp.org/news/react-lifecycle-methods-and-hooks-for-beginners/10:T8a4,
- Reusable components are building blocks of a React application designed to be reused in multiple places.
- They promote modularity, maintainability, and efficiency.

---
### Key Benefits

- **Code Reusability**: Write once, use multiple times.
- **Consistency**: Maintain consistent design and behavior across the app.
- **Ease of Maintenance**: Updates to a component reflect across all its instances.
- **Efficiency**: Reduces the need for duplicate code.

---
### Best Practices for Creating Reusable Components

- **Single Responsibility Principle**: Each component should have one clear purpose.
- **Props**: Use props to make components configurable and dynamic.
- **Composition Over Inheritance**: Combine smaller components to build larger ones.
- **Avoid Hardcoding**: Parameterize data through props instead of hardcoding values.
- **Styling Flexibility**: Use CSS modules, styled-components, or className props for flexible styling.
- **Granularity**: Balance between too granular (many small components) and too monolithic (large components).

---
### Examples of Reusable Components

1. Button

```jsx
const Button = ({ onClick, children, style }) => (
    <button onClick={onClick} style={style}>
        {children}
    </button>
);
```

2. Input Field

```jsx
const Input = ({ type, value, onChange, placeholder }) => (
    <input
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
    />
);

```

3. Card

```jsx
const Card = ({ children, style }) => (
    <div style={{ ...defaultStyle, ...style }}>
        {children}
    </div>
);

const defaultStyle = {
    border: "1px solid #ccc",
    padding: "10px",
    borderRadius: "5px",
};

```

---
### Tips

- **Test Components**: Ensure each component works in isolation.
- **Prop Validation**: Use `PropTypes` or TypeScript for better validation and type safety.
- **Document Components**: Add comments or maintain documentation to explain usage.

---
# References

- https://www.freecodecamp.org/news/how-to-build-reusable-react-components/
- https://buttercms.com/blog/building-reusable-components-using-react/11:Taf5,
- The **Virtual DOM (VDOM)** is a lightweight in-memory representation of the real DOM.
- React uses the VDOM to manage updates efficiently without directly manipulating the real DOM.

---
### Key Concepts

- The actual structure rendered in the browser.
- Updating it is slow because it triggers reflows and repaints.

---
### How the Virtual DOM Works

- **Initial Render**:
    - React creates a VDOM representation of the UI.
    - The VDOM is then used to create the real DOM for the browser.
- **Updating State or Props**:
    - React creates a new VDOM tree based on the updated state/props.
    - It compares the new VDOM tree with the previous one (a process called **diffing**).
    - Only the differences (changes) are applied to the real DOM.
- **Efficient Updates**:
    - React batches multiple updates and applies them in one operation to minimize performance costs.

---

### Benefits of the Virtual DOM

- **Performance**:
    - Reduces direct interactions with the real DOM.
    - Optimizes updates by calculating the smallest number of changes.
- **Declarative UI**:
    - Developers focus on what the UI should look like, and React handles how to update the DOM.
- **Cross-Browser Compatibility**:
    - React abstracts browser-specific quirks in DOM manipulation.

---

### Real-Life Analogy

- Think of updating the DOM like editing a book.
- Instead of rewriting the entire book (real DOM), React keeps a draft copy (virtual DOM), compares the draft with the original, and only updates the changed parts.

---

### Virtual DOM Diffing Algorithm

- **Tree Comparison**: React compares the new VDOM tree with the old one.
- **Key-Based Optimization**:
    - Keys in lists help React identify moved or updated elements efficiently.
- **Minimal Updates**:
    - React calculates and applies only the minimal required changes to the real DOM.

---
### Example

```jsx
function App() {
    const [count, setCount] = React.useState(0);

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );
}
```

When the button is clicked:

1. React updates the state (`count`).
2. React creates a new VDOM tree for `<App />`.
3. It compares the new tree with the old one.
4. Only the `<p>` element is updated in the real DOM.

---
### Summary

The Virtual DOM is a powerful feature of React that:

- Improves performance.
- Simplifies the UI development process.
- Provides a smooth and efficient user experience.

---
# References

- https://www.freecodecamp.org/news/what-is-the-virtual-dom-in-react/
- https://legacy.reactjs.org/docs/faq-internals.html
- https://www.geeksforgeeks.org/reactjs-virtual-dom/12:T1211,
This is some real world examples that build with react

---

| **Application**          | **Description**                                                           | **Key Features**                                                                                 |
| ------------------------ | ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------ |
| **Facebook**             | Social media platform, React's origin.                                    | News feed, notifications, live chat, real-time updates, and interactive UI.                      |
| **Instagram**            | Photo and video sharing platform owned by Meta.                           | Stories, filters, reels, dynamic user feeds, and push notifications.                             |
| **WhatsApp Web**         | Web version of the popular messaging app.                                 | Real-time messaging, live updates, QR login, and responsive design.                              |
| **Netflix**              | Streaming platform for movies and TV shows.                               | Dynamic user interface, personalized recommendations, and optimized streaming experiences.       |
| **Airbnb**               | Marketplace for lodging, primarily short-term rentals.                    | Interactive maps, real-time search results, and responsive layouts for booking accommodations.   |
| **Uber**                 | Ridesharing platform for booking cabs and delivery services.              | Live tracking, dynamic pricing, and real-time updates.                                           |
| **Pinterest**            | Visual discovery engine for sharing ideas and inspirations.               | Infinite scrolling, dynamic pin recommendations, and smooth user interactions.                   |
| **Slack**                | Collaboration platform for messaging and workplace tools.                 | Real-time messaging, file sharing, and integrated third-party tools.                             |
| **Shopify**              | E-commerce platform for businesses to create online stores.               | Dynamic dashboards, real-time inventory updates, and responsive store designs.                   |
| **Discord**              | Voice, video, and text communication platform for communities and gamers. | Real-time messaging, custom UIs for servers, and seamless voice/video integration.               |
| **Dropbox**              | Cloud storage platform for storing and sharing files.                     | Interactive UI for file uploads, drag-and-drop functionality, and real-time collaboration tools. |
| **Trello**               | Project management tool for task organization.                            | Drag-and-drop Kanban boards, real-time updates, and interactive UI elements.                     |
| **Asana**                | Task and project management application for teams.                        | Real-time task tracking, dynamic boards, and visual project timelines.                           |
| **BBC**                  | News website offering global and local news.                              | Dynamic content updates, real-time notifications, and seamless video playback.                   |
| **Medium**               | Blogging platform for writers and readers.                                | Interactive editor, personalized reading lists, and infinite scrolling for articles.             |
| **Khan Academy**         | Online learning platform offering free courses and lessons.               | Interactive learning tools, real-time quizzes, and progress tracking.                            |
| **GitHub (Front End)**   | Code hosting platform for version control and collaboration.              | Interactive dashboards, real-time updates on pull requests, and code comparison tools.           |
| **CodeSandbox**          | Online code editor for web development.                                   | Real-time collaborative editing, live previews, and seamless integration with GitHub.            |
| **Spotify (Web Player)** | Music streaming platform for discovering and playing music.               | Real-time search, dynamic playlists, and audio playback optimization.                            |

These examples showcase React's versatility in building scalable, interactive, and high-performing applications across various domains like social media, e-commerce, streaming, and productivity tools.

---
# References

- https://www.netflix.com/13:Ta89,
### 1. Installing Node.js and npm

Node.js and npm (Node Package Manager) are prerequisites for creating and running React applications.

1. **Download and Install Node.js**:
	- Visit the [Node.js official website](https://nodejs.org).
	- Download the **LTS** version for stability.
	- Follow the installation instructions for your operating system.
2. **Verify Installation**:
	- Open a terminal and run the following commands:
```bash
node -v
npm -v
```

- These commands will display the installed versions of Node.js and npm.

---

### 2. Setting up a React Project

1. Install Vite
	Vite is a fast frontend build tool.
	- Open a terminal and run
```bash
npm create vite@latest my-react-app --template react
```
	
	- Replace `my-react-app` with your desired project name.

2. **Navigate to the Project Directory**:
```bash
cd my-react-app
```

3. **Install Dependencies**
	Run the following command to install all the dependencies
	```bash
	npm install
	```

4. **Run the Development Server**
	Start the Vite development server to preview your app
	```bash
	npm run dev
	```

	- The terminal will display a URL (e.g., `http://localhost:5173`) where you can view your app in the browser.

---
### 3. Overview of the Project Folder Structure

Once the setup is complete, your project folder will look like this:

```perl
my-react-app/
â”œâ”€â”€ node_modules/           # Installed npm packages
â”œâ”€â”€ public/                 # Static assets (e.g., images, icons)
â”‚   â””â”€â”€ vite.svg            # Default Vite logo
â”œâ”€â”€ src/                    # Source code of your application
â”‚   â”œâ”€â”€ App.css             # Styles for the App component
â”‚   â”œâ”€â”€ App.jsx             # Main React component
â”‚   â”œâ”€â”€ main.jsx            # Entry point for the application
â”‚   â””â”€â”€ index.css           # Global styles
â”œâ”€â”€ .gitignore              # Files and folders to ignore in Git
â”œâ”€â”€ package.json            # Project metadata and dependencies
â”œâ”€â”€ vite.config.js          # Configuration file for Vite
â””â”€â”€ README.md               # Project documentation
```

**Key Files and Folders**:

- **`src/main.jsx`**: Entry point for your React app. It renders the root component (`App.jsx`).
- **`src/App.jsx`**: Default React component created by Vite. Customize this file to start building your app.
- **`public/`**: Store static assets like images or fonts.
- **`package.json`**: Manages dependencies, scripts, and project metadata.
- **`vite.config.js`**: Customize the build tool's behavior (e.g., plugins, server options).

---
# References

- https://vite.dev/guide/14:T8eb,
**State** is used to manage data that changes within a component. Unlike props, state is **mutable** and controlled by the component itself.

---
### Using the `useState` Hook

1. Import `useState`
	```jsx
	import { useState } from 'react';
	```

2. Initialize state
	```jsx
	const [count, setCount] = useState(0);
	```

3. Update state
	```jsx
	setCount(count + 1);
	```

---
### Example of State

```jsx
function Counter() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );
}
```

---
### Updating and Managing State

1. Updating State
	- State updates are asynchronous. React batches multiple state updates for performance.
	- Use the previous state for calculations
	```jsx
	setCount((prevCount) => prevCount + 1);
	```

2. Managing Complex State
	- For objects or arrays, update using the spread operator
	```jsx
	const [user, setUser] = useState({ name: "John", age: 25 });
	setUser((prevUser) => ({ ...prevUser, age: 26 }));
	```

3. Conditional Rendering Based on State
	```jsx
	function Toggle() {
    const [isOn, setIsOn] = useState(false);

    return (
        <button onClick={() => setIsOn(!isOn)}>
            {isOn ? "ON" : "OFF"}
        </button>
	    );
	}
	```

4. State in Forms
	Manage input fields using state
	```jsx
	function Form() {
    const [name, setName] = useState("");

    return (
	        <input
	            type="text"
	            value={name}
	            onChange={(e) => setName(e.target.value)}
	        />
	    );
	}
	```

---
### Summary

|**Feature**|**Props**|**State**|
|---|---|---|
|**Mutability**|Immutable (read-only)|Mutable (can be updated)|
|**Scope**|Passed from parent to child|Local to the component|
|**Use Case**|Passing data between components|Managing dynamic, interactive data|
|**Example**|`<Child name="John" />`|`const [count, setCount] = useState(0)`|
- **Props** make components reusable by passing dynamic data.
- **State** manages component-specific data that changes over time.

---
# References

- https://www.freecodecamp.org/news/full-guide-to-react-hooks/15:T1c5c,
In React, styling can be done in multiple ways depending on your preferences and the requirements of the project. You can use inline styles, external CSS, CSS Modules, or even CSS-in-JS solutions like **Styled Components** and utility-first frameworks like **Tailwind CSS**. This note will explore these approaches and when to use each.

---

### 1. Inline Styles vs External CSS vs CSS Modules

#### 1.1 Inline Styles

Inline styles are applied directly within a component using a JavaScript object. Each style property is written in camelCase instead of hyphenated format.

**Advantages**:

- Simple and quick for small styles or individual components.
- Styles are scoped to the component, preventing accidental global styles.

**Disadvantages**:

- Not ideal for complex styles or media queries.
- Limited to basic styles and does not support pseudo-classes like `:hover` or `:focus`.

#### Example of Inline Styles:

```jsx
function MyComponent() {
    const buttonStyle = {
        backgroundColor: 'blue',
        color: 'white',
        padding: '10px',
        borderRadius: '5px'
    };

    return <button style={buttonStyle}>Click Me</button>;
}
```

#### 1.2 External CSS

External CSS is the traditional way of styling websites. You create a `.css` file, and then link it to your React component by importing it. This approach is great for global styles and standard CSS features like pseudo-classes, media queries, and more.

**Advantages**:

- Good for global styles and shared styles between components.
- Easier to maintain for larger projects.

**Disadvantages**:

- Global scope can lead to unintended side effects (i.e., styles affecting unrelated components).
- No automatic scoping of styles, which can lead to conflicts.

#### Example of External CSS:

1. **Create a CSS file** (`styles.css`):

```css
/* styles.css */
.button {
    background-color: blue;
    color: white;
    padding: 10px;
    border-radius: 5px;
}
```

2. **Import and use in a React component**:

```jsx
import './styles.css';

function MyComponent() {
    return <button className="button">Click Me</button>;
}
```

#### 1.3 CSS Modules

CSS Modules help in **scoping CSS locally** to the component, meaning styles are applied only to the specific component and won't interfere with other components. They use a unique class name behind the scenes to prevent style conflicts.

**Advantages**:

- Localized styling, meaning styles are scoped to the component.
- Prevents class name conflicts.

**Disadvantages**:

- Can become verbose if not structured well.
- Requires an additional setup (though this is done automatically in most React build tools).

#### Example of CSS Modules

1. **Create a CSS Module file** (`MyComponent.module.css`):

```css
/* MyComponent.module.css */
.button {
    background-color: blue;
    color: white;
    padding: 10px;
    border-radius: 5px;
}
```

2. **Import and use the CSS Module in the component**:

```jsx
import styles from './MyComponent.module.css';

function MyComponent() {
    return <button className={styles.button}>Click Me</button>;
}
```

---

### 2. Introduction to Styling Libraries

#### 2.1 Styled Components (CSS-in-JS)

**Styled Components** is a popular **CSS-in-JS** library that allows you to write CSS directly in your JavaScript/JSX files. It provides the benefit of scoped styling (like CSS Modules), but also supports more dynamic styles by utilizing JavaScript to control the style based on props or state.

**Advantages**:

- Styles are scoped to the component by default.
- Supports dynamic styles based on props or state.
- Full access to JavaScript logic in styling (e.g., conditional styles).

**Disadvantages**:

- May add some overhead for small projects.
- Can result in larger JavaScript bundles due to the CSS-in-JS runtime.

#### Example of Styled Components:

1. **Install Styled Components**:

```bash
npm install styled-components
```

2. **Usage in a Component**:

```jsx
import styled from 'styled-components';

const Button = styled.button`
    background-color: blue;
    color: white;
    padding: 10px;
    border-radius: 5px;

    &:hover {
        background-color: darkblue;
    }
`;

function MyComponent() {
    return <Button>Click Me</Button>;
}
```

In this example, the `Button` component is styled using `styled-components`, and the styles are applied only to that component.

---

#### 2.2 Tailwind CSS

**Tailwind CSS** is a utility-first CSS framework that provides low-level utility classes to build custom designs. Itâ€™s often used with React to create fast and responsive UIs without writing custom CSS.

**Advantages**:

- Fast to develop with, as it avoids the need to write custom CSS.
- Encourages reusable and consistent styles with utility classes.
- Built-in responsive design and other common design patterns.

**Disadvantages**:

- May result in long class names in JSX, which can be harder to read.
- Over-reliance on utility classes can lead to repetitive code.

#### Example of Tailwind CSS:

1. **Install Tailwind CSS**:

```bash
npm install tailwindcss
npx tailwindcss init
```

2. **Setup and use in your React component**:

```jsx
function MyComponent() {
    return (
        <button className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700">
            Click Me
        </button>
    );
}
```

In this example, Tailwind utility classes are used to style the `button` element with background color, text color, padding, rounded corners, and a hover effect.

---

### Summary of Styling in React

|**Method**|**Advantages**|**Disadvantages**|
|---|---|---|
|**Inline Styles**|Quick to implement, scoped to component|Limited features (no pseudo-classes), not ideal for complex styles|
|**External CSS**|Great for global styles and easy to maintain|Global scope can lead to conflicts, no automatic scoping|
|**CSS Modules**|Scoped to components, prevents style conflicts|Requires extra setup, can become verbose|
|**Styled Components (CSS-in-JS)**|Scoped styles, dynamic styling based on props or state|Can add overhead, larger bundle sizes|
|**Tailwind CSS**|Fast development, utility classes for consistent design|Long class names in JSX, can result in repetitive code|

---

### Conclusion

- **Inline styles** are useful for simple, scoped styling but are limited for complex scenarios.
- **External CSS** is great for global styles but can cause conflicts in larger projects.
- **CSS Modules** provide scoped styles without the global leakage of external CSS.
- **Styled Components** offer powerful, dynamic styling capabilities within React using JavaScript.
- **Tailwind CSS** is an efficient utility-first CSS framework that speeds up development with a consistent design pattern.

Choosing the right approach depends on the project size, requirements, and preferences. For small projects, inline styles or external CSS might suffice, while larger projects may benefit from CSS Modules, Styled Components, or Tailwind CSS.

---
# References

- https://legacy.reactjs.org/docs/faq-styling.html16:Tb86,
- **JSX (JavaScript XML)**: A syntax extension for JavaScript used in React to describe the UI structure.
- **TSX (TypeScript XML)**: Similar to JSX but used in React projects with TypeScript for type safety.
- Both allow developers to write code that looks like HTML, but they are not HTMLâ€”they are syntactic sugar that gets transpiled into JavaScript.

---
### Key Differences Between JSX/TSX and HTML

|**Feature**|**JSX/TSX**|**HTML**|
|---|---|---|
|**Syntax**|Combines JavaScript/TypeScript with XML-like tags.|Pure markup language.|
|**Attributes**|Uses `camelCase` (e.g., `className`, `onClick`).|Uses standard HTML attributes (e.g., `class`, `onclick`).|
|**Dynamic Content**|Allows embedding of JavaScript expressions using `{}`.|Requires separate scripting with `<script>` tags.|
|**Rendering**|Transpiles to `React.createElement()` calls to render the DOM.|Directly rendered by the browser.|
|**Custom Components**|Supports reusable React components as tags.|Does not support custom tags unless extended by frameworks.|
|**Type Safety**|TSX supports type-checking for props and components.|HTML has no type-checking capabilities.|

---
### JSX/TSX Attributes and How to Use Them

1. Commonly Used Attributes
	- **className**: Replace `class` with `className` to define CSS classes.
	```jsx
	<div className="container">Hello, World!</div>
	```
	- **htmlFor**: Replace `for` with `htmlFor` in `<label>` tags.
	```jsx
	<label htmlFor="name">Name:</label>
	<input id="name" type="text" />
	```
	- **style**: Use a JavaScript object for inline styles.
	```jsx
	<div style={{ color: 'blue', fontSize: '18px' }}>Styled Text</div>
	```

2. Dynamic Content with `{}`
	- Embed JavaScript expressions inside curly braces:
	```jsx
	const name = "John";
	<h1>Hello, {name}!</h1> // Output: Hello, John!
	```

3. Event Handlers
	- Pass JavaScript functions to event attributes
	```jsx
	<button onClick={() => alert('Button clicked!')}>Click Me</button>
	```

4. Conditional Rendering
	- Use ternary operators or logical `&&` inside JSX
	```jsx
	const isLoggedIn = true;
	<p>{isLoggedIn ? "Welcome back!" : "Please log in."}</p>
	```

5. Spreading Props
	- Spread attributes dynamically using the `...` operator
	```jsx
	const props = { id: "name", placeholder: "Enter your name" };
	<input {...props} />;
	```

6. TSX-Specific Features
	- Type-check props
	```tsx
	type ButtonProps = { label: string; onClick: () => void };
	const Button: React.FC<ButtonProps> = ({ label, onClick }) => (
	  <button onClick={onClick}>{label}</button>
	);
	```

---

### Summary

- JSX/TSX provides a declarative, powerful way to describe UI with JavaScript/TypeScript.
- While it resembles HTML, key differences like `camelCase` attributes, dynamic expressions, and type safety make it much more flexible and suited for modern application development.

---
# References

- https://abhishekdhapare.hashnode.dev/jsx-vs-tsx-choosing-the-right-syntax-for-your-react-app17:T19eb,Yes, you can integrate WhatsApp into your web application using the **WhatsApp Business API**. This API allows you to send and receive messages, manage contacts, and automate interactions with users on WhatsApp. Here's how you can get started:

---

### **1. WhatsApp Business API**
The WhatsApp Business API is the official way to integrate WhatsApp into your application. It is designed for businesses and developers to interact with users at scale.

#### **Steps to Use WhatsApp Business API:**
1. **Sign Up for a WhatsApp Business Account**:
   - Go to the [Meta for Developers](https://developers.facebook.com/docs/whatsapp) page and create a developer account.
   - Apply for access to the WhatsApp Business API.

2. **Choose a Solution Provider**:
   - Meta (formerly Facebook) requires you to work with an official **Business Solution Provider (BSP)** to use the API. Some popular providers include:
     - Twilio
     - Vonage (formerly Nexmo)
     - MessageBird
     - WATI (WhatsApp Team Inbox)
     - Gupshup
   - These providers simplify the setup process and often provide additional tools for managing WhatsApp messages.

3. **Set Up the API**:
   - Follow the documentation provided by your chosen BSP to set up the API.
   - You'll need to authenticate your account, configure webhooks, and set up a phone number for WhatsApp.

4. **Integrate with Your Web Application**:
   - Use the API endpoints provided by your BSP to send and receive messages.
   - Example: Send a message using the API:
     ```json
     POST /v1/messages
     {
       "to": "recipient_phone_number",
       "type": "text",
       "text": {
         "body": "Hello, this is a test message!"
       }
     }
     ```

5. **Handle Webhooks**:
   - Set up webhooks to receive incoming messages, delivery statuses, and other events from WhatsApp.

---

### **2. Twilio API for WhatsApp**
Twilio is one of the most popular providers for WhatsApp integration. It simplifies the process of sending and receiving messages.

#### **Steps to Use Twilio for WhatsApp:**
1. **Create a Twilio Account**:
   - Sign up at [Twilio](https://www.twilio.com/).

2. **Enable WhatsApp on Twilio**:
   - Go to the Twilio Console and enable WhatsApp for your account.
   - Twilio provides a sandbox for testing, where you can send messages to a pre-approved number.

3. **Integrate Twilio API**:
   - Use Twilio's API to send and receive WhatsApp messages.
   - Example (Python):
     ```python
     from twilio.rest import Client

     account_sid = 'your_account_sid'
     auth_token = 'your_auth_token'
     client = Client(account_sid, auth_token)

     message = client.messages.create(
         from_='whatsapp:+14155238886',  # Twilio's WhatsApp sandbox number
         body='Hello, this is a test message!',
         to='whatsapp:recipient_phone_number'
     )

     print(message.sid)
     ```

4. **Set Up Webhooks**:
   - Configure webhooks in Twilio to handle incoming messages and other events.

---

### **3. Other Alternatives**
If you don't want to use the official WhatsApp Business API, there are some unofficial libraries and tools, but these are not recommended as they may violate WhatsApp's terms of service and could result in your account being banned.

---

### **Key Considerations**
- **Pricing**: WhatsApp Business API and third-party providers like Twilio charge based on the number of messages sent and received.
- **Compliance**: Ensure you comply with WhatsApp's policies and guidelines.
- **User Consent**: Users must opt-in to receive messages from your business on WhatsApp.

---

By using the WhatsApp Business API or a provider like Twilio, you can seamlessly integrate WhatsApp into your web application and provide a great communication experience for your users.

---

The **WhatsApp Business API** itself is **not free**. WhatsApp charges businesses for sending messages to users, but receiving messages is generally free. Here's a breakdown of the costs and free options available:

---

### **1. WhatsApp Business API Costs**
- **Message-Based Pricing**:
  - WhatsApp charges businesses based on the number of **template messages** (outbound messages initiated by the business) and **session messages** (replies within a 24-hour window).
  - Pricing varies by country. For example:
    - In the US, sending a template message costs **$0.005 per message** (0.5 cents).
    - In India, it costs **$0.0023 per message** (0.23 cents).
  - Receiving messages from users is free.

- **Business Solution Provider (BSP) Fees**:
  - If you use a third-party provider like Twilio, Vonage, or MessageBird, they may charge additional fees for their services, such as API usage, setup, or support.

---

### **2. Free Options**
If you're looking for a free way to use WhatsApp for your web application, your options are limited:

#### **a. WhatsApp Business App**
- The **WhatsApp Business App** is a free mobile app designed for small businesses.
- It allows you to communicate with customers, set up automated replies, and create a business profile.
- However, it is not an API and cannot be directly integrated into a web application.

#### **b. Twilio WhatsApp Sandbox**
- Twilio offers a **free WhatsApp sandbox** for testing purposes.
- You can send and receive messages to a pre-approved number for free.
- This is great for development and testing, but for production use, you'll need to upgrade to a paid plan.

#### **c. Unofficial Libraries (Not Recommended)**
- There are unofficial libraries and tools (e.g., `whatsapp-web.js`) that allow you to interact with WhatsApp programmatically.
- These tools often rely on reverse-engineering WhatsApp's protocols and are **not officially supported**.
- Using them may violate WhatsApp's terms of service, and your account could be banned.

---

### **3. Cost-Effective Solutions**
If you're looking for a low-cost solution:
- Use the **WhatsApp Business API** with a provider like Twilio or WATI.
- Start with the **Twilio WhatsApp Sandbox** for free testing.
- Optimize your messaging to reduce costs (e.g., use session messages instead of template messages whenever possible).

---

### **Summary**
- The WhatsApp Business API is **not free**, but it is the official and most reliable way to integrate WhatsApp into your web application.
- Free options like the WhatsApp Business App or Twilio's sandbox are limited and not suitable for production use.
- Always ensure compliance with WhatsApp's policies to avoid account bans.

If you're just starting out, I recommend using the **Twilio WhatsApp Sandbox** for testing and then transitioning to the paid API for production use.0:{"P":null,"b":"GRLSLu0q3EftvB0bCxiZG","p":"/me","c":["","projects"],"i":false,"f":[[["",{"children":["projects",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/me/_next/static/css/8d0a0874ede7a238.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_a48e27 __variable_c96e19 antialiased pt-24","children":[["$","header",null,{"className":"fixed top-0 left-0 w-full backdrop-blur-md p-4 z-20 rounded-b-lg","children":["$","div",null,{"className":"flex items-center justify-around w-full","children":[["$","div",null,{"className":"w-36","children":["$","$L2",null,{"href":"/","className":"text-xl gradient-text","children":"Kavindu Udara"}]}],["$","div",null,{"className":"flex justify-evenly w-1/2","children":["$","ul",null,{"className":"flex flex-wrap gap-8 font-semibold","children":[["$","li",null,{"className":"cursor-pointer gradient-text","children":["$","$L2",null,{"href":"/blogs","children":"blog"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"/projects","children":"projects"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"/","children":"Contact"}]}]]}]}],["$","div",null,{"className":"w-18 h-18 rounded-full bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 ","children":["$","img",null,{"className":"w-12 h-12 rounded-full border-2 border-transparent cursor-pointer","src":"https://avatars.githubusercontent.com/u/155027870?v=4","alt":"Kavindu Udara"}]}]]}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],["$","div",null,{"className":"flex flex-col items-center justify-center h-screen text-center","children":[["$","h1",null,{"className":"text-3xl mb-1","children":"404 - Page Not Found"}],["$","p",null,{"children":"Oops! The page you are looking for does not exist."}],["$","$L2",null,{"href":"/","children":"Go back to Home"}]]}]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","projects","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","div",null,{"className":"max-w-4xl mx-auto p-8","children":[["$","h1",null,{"className":" gradient-text mb-5 text-center","children":"My Projects"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-8 grid-cols-1","children":[["$","$L5","0",{"readme":{"slug":"build-and-deploy-project-to-github","title":"build and deploy project to github","date":"2025-02-12T11:12:58+0530","content":"$6"}}],["$","$L5","1",{"readme":{"slug":"components-in-react","title":"Components in React","date":"$D2024-12-01T15:55:51.000Z","content":"$7"}}],["$","$L5","2",{"readme":{"slug":"conditional-rendering-in-react","title":"Conditional Rendering in React","date":"$D2024-12-01T16:05:23.000Z","content":"$8"}}],["$","$L5","3",{"readme":{"slug":"deploying-a-react-app","title":"Deploying a React App","date":"$D2024-12-01T16:14:35.000Z","content":"$9"}}],["$","$L5","4",{"readme":{"slug":"event-handling-in-react","title":"Event Handling in React","date":"$D2024-12-01T16:03:30.000Z","content":"$a"}}],["$","$L5","5",{"readme":{"slug":"getting-started-guide","title":"Getting Started Guide","date":"2025-02-12T11:12:58+0530","content":"\r\nContent of the guide..."}}],["$","$L5","6",{"readme":{"slug":"lists-and-keys-in-react","title":"Lists and Keys in React","date":"$D2024-12-01T16:07:30.000Z","content":"$b"}}],["$","$L5","7",{"readme":{"slug":"my-first-blog-post","title":"My First Blog Post","date":"2025-02-12T11:12:58+0530","content":"$c"}}],["$","$L5","8",{"readme":{"slug":"props-in-react","title":"Props in React","date":"$D2024-12-01T15:59:05.000Z","content":"$d"}}],["$","$L5","9",{"readme":{"slug":"react-fundamentals","title":"React Fundamentals","date":"$D2024-12-01T15:06:06.000Z","content":"$e"}}],["$","$L5","10",{"readme":{"slug":"react-lifecycle-and-hooks","title":"React Lifecycle and Hooks","date":"$D2024-12-01T16:10:04.000Z","content":"$f"}}],["$","$L5","11",{"readme":{"slug":"react-reusable-components","title":"React Reusable Components","date":"$D2024-12-01T15:11:07.000Z","content":"$10"}}],["$","$L5","12",{"readme":{"slug":"react-virtual-dom","title":"React Virtual DOM","date":"$D2024-12-01T15:24:27.000Z","content":"$11"}}],["$","$L5","13",{"readme":{"slug":"real-world-examples-of-apps-build-with-react","title":"Real World Examples of Apps Build With React","date":"$D2024-12-01T15:28:46.000Z","content":"$12"}}],["$","$L5","14",{"readme":{"slug":"setting-up-the-development-environment-for-react-with-vite","title":"Setting Up the Development Environment for React With Vite","date":"$D2024-12-01T15:38:32.000Z","content":"$13"}}],["$","$L5","15",{"readme":{"slug":"state-in-react","title":"State in React","date":"$D2024-12-01T16:01:26.000Z","content":"$14"}}],["$","$L5","16",{"readme":{"slug":"styling-in-react","title":"Styling in React","date":"$D2024-12-01T16:12:01.000Z","content":"$15"}}],["$","$L5","17",{"readme":{"slug":"what-is-jsx-tsx-and-how-it-differs-from-html","title":"What Is JSX TSX and How It Differs From HTML","date":"$D2024-12-01T15:48:48.000Z","content":"$16"}}],["$","$L5","18",{"readme":{"slug":"whatsapp","title":"Whatsapp","date":"2025-02-12T15:56:33+0530","content":"$17"}}]]}]]}],null,["$","$L18",null,{"children":"$L19"}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","8gAaKswoWknqtsk-1_ZYy",{"children":[["$","$L1a",null,{"children":"$L1b"}],["$","$L1c",null,{"children":"$L1d"}],null]}]]}],false]],"m":"$undefined","G":["$1e","$undefined"],"s":false,"S":true}
1d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
1b:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Kavindu Udara"}],["$","meta","2",{"name":"description","content":"This is my personal website I use to showcase my projects and blogs."}],["$","link","3",{"rel":"icon","href":"/me/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
19:null
