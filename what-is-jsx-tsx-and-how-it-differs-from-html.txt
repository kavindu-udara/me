1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-ad05a37061268ac6.js","177","static/chunks/app/layout-869602401073e884.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/me/_next/static/css/1da273fd1639c051.css","style"]
:HL["/me/_next/static/css/12c033eb3dc8055a.css","style"]
0:{"P":null,"b":"DL3BE8Xgt382l5BFAxzh6","p":"/me","c":["","what-is-jsx-tsx-and-how-it-differs-from-html"],"i":false,"f":[[["",{"children":[["slug","what-is-jsx-tsx-and-how-it-differs-from-html","d"],{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/me/_next/static/css/1da273fd1639c051.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_a48e27 __variable_c96e19 antialiased pt-24","children":[["$","header",null,{"className":"fixed top-0 left-0 w-full backdrop-blur-md p-4 z-20 rounded-b-lg","children":["$","div",null,{"className":"flex items-center justify-around w-full","children":[["$","div",null,{"className":"w-36","children":["$","$L2",null,{"href":"/","className":"text-xl gradient-text","children":"Kavindu Udara"}]}],["$","div",null,{"className":"flex justify-evenly w-1/2","children":["$","ul",null,{"className":"flex flex-wrap gap-8 font-semibold","children":[["$","li",null,{"className":"cursor-pointer gradient-text","children":["$","$L2",null,{"href":"/blogs","children":"blog"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"/","children":"projects"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"/","children":"Contact"}]}]]}]}],["$","div",null,{"className":"w-18 h-18 rounded-full bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 ","children":["$","img",null,{"className":"w-12 h-12 rounded-full border-2 border-transparent cursor-pointer","src":"https://avatars.githubusercontent.com/u/155027870?v=4","alt":"Kavindu Udara"}]}]]}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],["$","div",null,{"className":"flex flex-col items-center justify-center h-screen text-center","children":[["$","h1",null,{"className":"text-3xl mb-1","children":"404 - Page Not Found"}],["$","p",null,{"children":"Oops! The page you are looking for does not exist."}],["$","$L2",null,{"href":"/","children":"Go back to Home"}]]}]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":[["slug","what-is-jsx-tsx-and-how-it-differs-from-html","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/me/_next/static/css/12c033eb3dc8055a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","AB0C72a783-VJM4hrfpHk",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[2442,["479","static/chunks/795d4814-6ed8d3b2717688f6.js","711","static/chunks/8e1d74a4-cfd329457e90dfbc.js","528","static/chunks/528-d64e9c3386053ccf.js","182","static/chunks/app/%5Bslug%5D/page-6ec12b92c78a2ff0.js"],"default"]
e:Tb86,
- **JSX (JavaScript XML)**: A syntax extension for JavaScript used in React to describe the UI structure.
- **TSX (TypeScript XML)**: Similar to JSX but used in React projects with TypeScript for type safety.
- Both allow developers to write code that looks like HTML, but they are not HTMLâ€”they are syntactic sugar that gets transpiled into JavaScript.

---
### Key Differences Between JSX/TSX and HTML

|**Feature**|**JSX/TSX**|**HTML**|
|---|---|---|
|**Syntax**|Combines JavaScript/TypeScript with XML-like tags.|Pure markup language.|
|**Attributes**|Uses `camelCase` (e.g., `className`, `onClick`).|Uses standard HTML attributes (e.g., `class`, `onclick`).|
|**Dynamic Content**|Allows embedding of JavaScript expressions using `{}`.|Requires separate scripting with `<script>` tags.|
|**Rendering**|Transpiles to `React.createElement()` calls to render the DOM.|Directly rendered by the browser.|
|**Custom Components**|Supports reusable React components as tags.|Does not support custom tags unless extended by frameworks.|
|**Type Safety**|TSX supports type-checking for props and components.|HTML has no type-checking capabilities.|

---
### JSX/TSX Attributes and How to Use Them

1. Commonly Used Attributes
	- **className**: Replace `class` with `className` to define CSS classes.
	```jsx
	<div className="container">Hello, World!</div>
	```
	- **htmlFor**: Replace `for` with `htmlFor` in `<label>` tags.
	```jsx
	<label htmlFor="name">Name:</label>
	<input id="name" type="text" />
	```
	- **style**: Use a JavaScript object for inline styles.
	```jsx
	<div style={{ color: 'blue', fontSize: '18px' }}>Styled Text</div>
	```

2. Dynamic Content with `{}`
	- Embed JavaScript expressions inside curly braces:
	```jsx
	const name = "John";
	<h1>Hello, {name}!</h1> // Output: Hello, John!
	```

3. Event Handlers
	- Pass JavaScript functions to event attributes
	```jsx
	<button onClick={() => alert('Button clicked!')}>Click Me</button>
	```

4. Conditional Rendering
	- Use ternary operators or logical `&&` inside JSX
	```jsx
	const isLoggedIn = true;
	<p>{isLoggedIn ? "Welcome back!" : "Please log in."}</p>
	```

5. Spreading Props
	- Spread attributes dynamically using the `...` operator
	```jsx
	const props = { id: "name", placeholder: "Enter your name" };
	<input {...props} />;
	```

6. TSX-Specific Features
	- Type-check props
	```tsx
	type ButtonProps = { label: string; onClick: () => void };
	const Button: React.FC<ButtonProps> = ({ label, onClick }) => (
	  <button onClick={onClick}>{label}</button>
	);
	```

---

### Summary

- JSX/TSX provides a declarative, powerful way to describe UI with JavaScript/TypeScript.
- While it resembles HTML, key differences like `camelCase` attributes, dynamic expressions, and type safety make it much more flexible and suited for modern application development.

---
# References

- https://abhishekdhapare.hashnode.dev/jsx-vs-tsx-choosing-the-right-syntax-for-your-react-app5:["$","$Ld",null,{"content":"$e","data":{"date":"$D2024-12-01T15:48:48.000Z","draft":false,"title":"What Is JSX TSX and How It Differs From HTML"}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Kavindu Udara"}],["$","meta","2",{"name":"description","content":"This is my personal website I use to showcase my projects and blogs."}],["$","link","3",{"rel":"icon","href":"/me/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
7:null
