1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/me/_next/static/css/1d9abe454822820e.css","style"]
0:{"P":null,"b":"atdZIXSGzkPFBsJtwNKu0","p":"/me","c":["","what-is-jsx-tsx-and-how-it-differs-from-html"],"i":false,"f":[[["",{"children":[["slug","what-is-jsx-tsx-and-how-it-differs-from-html","d"],{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/me/_next/static/css/1d9abe454822820e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_a48e27 __variable_c96e19 antialiased","children":[["$","div",null,{"className":"readme-view max-w-4xl mx-auto p-8"}],["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":[["slug","what-is-jsx-tsx-and-how-it-differs-from-html","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","DSn3xTW5NB1k8oS3U9vh2",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],null]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:I[5577,["479","static/chunks/795d4814-6ed8d3b2717688f6.js","711","static/chunks/8e1d74a4-cfd329457e90dfbc.js","528","static/chunks/528-65f71005039027ed.js","182","static/chunks/app/%5Bslug%5D/page-1ad8078ba5d2eeda.js"],"default"]
d:Tb86,
- **JSX (JavaScript XML)**: A syntax extension for JavaScript used in React to describe the UI structure.
- **TSX (TypeScript XML)**: Similar to JSX but used in React projects with TypeScript for type safety.
- Both allow developers to write code that looks like HTML, but they are not HTMLâ€”they are syntactic sugar that gets transpiled into JavaScript.

---
### Key Differences Between JSX/TSX and HTML

|**Feature**|**JSX/TSX**|**HTML**|
|---|---|---|
|**Syntax**|Combines JavaScript/TypeScript with XML-like tags.|Pure markup language.|
|**Attributes**|Uses `camelCase` (e.g., `className`, `onClick`).|Uses standard HTML attributes (e.g., `class`, `onclick`).|
|**Dynamic Content**|Allows embedding of JavaScript expressions using `{}`.|Requires separate scripting with `<script>` tags.|
|**Rendering**|Transpiles to `React.createElement()` calls to render the DOM.|Directly rendered by the browser.|
|**Custom Components**|Supports reusable React components as tags.|Does not support custom tags unless extended by frameworks.|
|**Type Safety**|TSX supports type-checking for props and components.|HTML has no type-checking capabilities.|

---
### JSX/TSX Attributes and How to Use Them

1. Commonly Used Attributes
	- **className**: Replace `class` with `className` to define CSS classes.
	```jsx
	<div className="container">Hello, World!</div>
	```
	- **htmlFor**: Replace `for` with `htmlFor` in `<label>` tags.
	```jsx
	<label htmlFor="name">Name:</label>
	<input id="name" type="text" />
	```
	- **style**: Use a JavaScript object for inline styles.
	```jsx
	<div style={{ color: 'blue', fontSize: '18px' }}>Styled Text</div>
	```

2. Dynamic Content with `{}`
	- Embed JavaScript expressions inside curly braces:
	```jsx
	const name = "John";
	<h1>Hello, {name}!</h1> // Output: Hello, John!
	```

3. Event Handlers
	- Pass JavaScript functions to event attributes
	```jsx
	<button onClick={() => alert('Button clicked!')}>Click Me</button>
	```

4. Conditional Rendering
	- Use ternary operators or logical `&&` inside JSX
	```jsx
	const isLoggedIn = true;
	<p>{isLoggedIn ? "Welcome back!" : "Please log in."}</p>
	```

5. Spreading Props
	- Spread attributes dynamically using the `...` operator
	```jsx
	const props = { id: "name", placeholder: "Enter your name" };
	<input {...props} />;
	```

6. TSX-Specific Features
	- Type-check props
	```tsx
	type ButtonProps = { label: string; onClick: () => void };
	const Button: React.FC<ButtonProps> = ({ label, onClick }) => (
	  <button onClick={onClick}>{label}</button>
	);
	```

---

### Summary

- JSX/TSX provides a declarative, powerful way to describe UI with JavaScript/TypeScript.
- While it resembles HTML, key differences like `camelCase` attributes, dynamic expressions, and type safety make it much more flexible and suited for modern application development.

---
# References

- https://abhishekdhapare.hashnode.dev/jsx-vs-tsx-choosing-the-right-syntax-for-your-react-app4:["$","$Lc",null,{"content":"$d","data":{"date":"$D2024-12-01T15:48:48.000Z","draft":false,"title":"What Is JSX TSX and How It Differs From HTML"}}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Kavindu Udara"}],["$","meta","2",{"name":"description","content":"Kavindu Udara's blog"}],["$","link","3",{"rel":"icon","href":"/me/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null
