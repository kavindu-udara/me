1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/me/_next/static/css/1d9abe454822820e.css","style"]
0:{"P":null,"b":"atdZIXSGzkPFBsJtwNKu0","p":"/me","c":["","state-in-react"],"i":false,"f":[[["",{"children":[["slug","state-in-react","d"],{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/me/_next/static/css/1d9abe454822820e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_a48e27 __variable_c96e19 antialiased","children":[["$","div",null,{"className":"readme-view max-w-4xl mx-auto p-8"}],["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":[["slug","state-in-react","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","4d1UIYhVK_TgdoVybsR1Q",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],null]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:I[5577,["479","static/chunks/795d4814-6ed8d3b2717688f6.js","711","static/chunks/8e1d74a4-cfd329457e90dfbc.js","528","static/chunks/528-65f71005039027ed.js","182","static/chunks/app/%5Bslug%5D/page-1ad8078ba5d2eeda.js"],"default"]
d:T8eb,
**State** is used to manage data that changes within a component. Unlike props, state is **mutable** and controlled by the component itself.

---
### Using the `useState` Hook

1. Import `useState`
	```jsx
	import { useState } from 'react';
	```

2. Initialize state
	```jsx
	const [count, setCount] = useState(0);
	```

3. Update state
	```jsx
	setCount(count + 1);
	```

---
### Example of State

```jsx
function Counter() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );
}
```

---
### Updating and Managing State

1. Updating State
	- State updates are asynchronous. React batches multiple state updates for performance.
	- Use the previous state for calculations
	```jsx
	setCount((prevCount) => prevCount + 1);
	```

2. Managing Complex State
	- For objects or arrays, update using the spread operator
	```jsx
	const [user, setUser] = useState({ name: "John", age: 25 });
	setUser((prevUser) => ({ ...prevUser, age: 26 }));
	```

3. Conditional Rendering Based on State
	```jsx
	function Toggle() {
    const [isOn, setIsOn] = useState(false);

    return (
        <button onClick={() => setIsOn(!isOn)}>
            {isOn ? "ON" : "OFF"}
        </button>
	    );
	}
	```

4. State in Forms
	Manage input fields using state
	```jsx
	function Form() {
    const [name, setName] = useState("");

    return (
	        <input
	            type="text"
	            value={name}
	            onChange={(e) => setName(e.target.value)}
	        />
	    );
	}
	```

---
### Summary

|**Feature**|**Props**|**State**|
|---|---|---|
|**Mutability**|Immutable (read-only)|Mutable (can be updated)|
|**Scope**|Passed from parent to child|Local to the component|
|**Use Case**|Passing data between components|Managing dynamic, interactive data|
|**Example**|`<Child name="John" />`|`const [count, setCount] = useState(0)`|
- **Props** make components reusable by passing dynamic data.
- **State** manages component-specific data that changes over time.

---
# References

- https://www.freecodecamp.org/news/full-guide-to-react-hooks/4:["$","$Lc",null,{"content":"$d","data":{"date":"$D2024-12-01T16:01:26.000Z","draft":false,"title":"State in React"}}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Kavindu Udara"}],["$","meta","2",{"name":"description","content":"Kavindu Udara's blog"}],["$","link","3",{"rel":"icon","href":"/me/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null
